//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.AspNet.Identity;
namespace Rosly.Models
{
    using System;
    using System.Collections.Generic;
    using Rosly.Services;
    using Outlook = Microsoft.Office.Interop.Outlook;

    public partial class Employee
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Employee()
        {
            this.Enrollments = new HashSet<Enrollment>();
            this.UserNotifications = new HashSet<UserNotification>();
        }
    
        public int id { get; set; }
        public string fname { get; set; }
        public string lname { get; set; }
        public string email { get; set; }
        public string bus_unit { get; set; }
        public short cost_cent { get; set; }
        public string cube_loc { get; set; }
        public string area { get; set; }
        public Nullable<short> employeeId { get; set; }
    
        public virtual Location Location { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Enrollment> Enrollments { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<UserNotification> UserNotifications { get; set; }
        public virtual BusUnit BusUnit { get; set; }

        public void Notify(Notification notification, bool isEmailNotification)
        {
            var userNotification = new UserNotification(this, notification, isEmailNotification);

            UserNotifications.Add(userNotification);

            //if (isEmailNotification)
            //{
            //    EmailService emailService = new EmailService(userNotification);
            //    emailService.SendEmail();
            //}
        }

        private void SendNotification(Notification notification)
        {
            try
            {
                Outlook._Application _app = new Outlook.Application();
                Outlook.MailItem mail = (Outlook.MailItem)_app.CreateItem(Outlook.OlItemType.olMailItem);
                mail.To = email;
                mail.Subject = "Course Cancelled";
                mail.Body = "The course you enrolled in was cancelled";
                mail.Importance = Outlook.OlImportance.olImportanceNormal;
                ((Outlook._MailItem)mail).Send();
                Console.WriteLine("Your email was sent successfully.");
            }
            catch (Exception e)
            {
                Console.WriteLine("Error sending email" + e.ToString());
                throw;
            }
        }

        public void SendInvite(Notification notification, Schedule schedule, bool isEmailNotification)
        {
            var userNotification = new UserNotification(this, notification, isEmailNotification);

            UserNotifications.Add(userNotification);

            //EmailService emailService = new EmailService(userNotification);
            //emailService.SendInvite();
        }
    }
}
