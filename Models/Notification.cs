//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rosly.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Notification
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Notification()
        {
            this.UserNotifications = new HashSet<UserNotification>();
        }
    
        public int id { get; private set; }
        public System.DateTime date_time { get; private set; }
        public Models.NotificationType notification_type { get; private set; }
        public Nullable<System.DateTime> original_date_time { get; private set; }
        public string original_location { get; private set; }
        public int course_id { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<UserNotification> UserNotifications { get; set; }
        public virtual Schedule Schedule { get; private set; }

        private Notification(NotificationType type, Schedule course)
        {
            if (course == null)
                throw new ArgumentNullException("course");

            notification_type = type;
            Schedule = course;
            date_time = DateTime.Now;
            original_location = course.area;
            original_date_time = course.start_date;
        }

        public static Notification CourseCreated(Schedule schedule) => new Notification(NotificationType.CourseCreated, schedule);

        public static Notification CourseUpdated(Schedule newSchedule, DateTime originalDateTime, string originalLocation)
        {
            var notification = new Notification(NotificationType.CourseUpdated, newSchedule);
            notification.original_date_time = originalDateTime;
            notification.original_location = originalLocation;

            return notification;
        }

        public static Notification CourseCanceled(Schedule schedule)
        {
            return new Notification(NotificationType.CourseCancelled, schedule);
        }

        public static Notification EmployeeEnrolled(Schedule schedule) => new Notification(NotificationType.EmployeeEnrolled, schedule);

        public static Notification EmployeeWaitlisted(Schedule schedule) => new Notification(NotificationType.EmployeeWaitlisted, schedule);

        public static Notification SpotAvailable(Schedule schedule) => new Notification(NotificationType.SpotAvailable, schedule);

    }
}
